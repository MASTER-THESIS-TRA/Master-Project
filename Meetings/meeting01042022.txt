Applikationens generelle layout/tema: 
 - Netbank-ish (man kan overføre til andre, men skal så kende deres detaljer, og får dem ikke præsenteret af systemet). 
 - Marketplace-ish (man kan søge på specifikke resourcer/varer og købe dem af den der udbyder dem)
 - 

Transform: 
 - Homomorphism: f(u+v) = f(u) + f(v)          and          f(k*v) = k*f(v) 
 - Valuation map: just a homomorphism from R to V(vector space over \mathbb{R})
 - "the set of valid events with respect to a valuation map"???
 - Så hvad er et valuation map i den her sammenhæng? En mapping fra resource til vægt?? 


Rent interessespørgsmål (bare kort, vi skal ikke bruge tid på det): 
 - Theorem 3: every vector space has a basis. 
   - Hvad er basen for resourcer? Settet af alle mulige resourcetyper? Med arbitrære antal? 
   - Dette vil i hvert fald overholde kravet til kardinalitet.

S = ownership States
A = Agents in the system
R = Resources
T = set of possible Transfers

App: 
 - skal kunne se konto
 - Skal kunnet udføre 2 operationer: 
   - Transfer
   - Transform

Transform: 
 - én agent sender en transaktion: for denne agent sker der en ændring (noget forsvinder og noget kommer til) 
 - Forskelle fra transfer: 
   - én agent
   - skal ikke summere til 0
 - Resource manageren skal tjekke at dens "vægt" stemmer. (Valuation map) 
   - Altså mappe fra resource typer til vægt. 
   - "Bill of materials" (slå det op, siger Fritz) 
   - Penge skal også kunnet indgå, hvis man producerer og sælger i ét hug.
   - Penge skal ikke mappes til vægt, de forbliver bare som penge, men skal regnes med i summen. (altså en transform skal tjekke om vægten + pengene stemmer) 
   - 
 - Så hold styr på penge VS fysisk produkt. 